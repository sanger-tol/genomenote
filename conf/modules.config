/*
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Config file for defining DSL2 per module options and publishing paths
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Available keys to override module options:
        ext.args   = Additional arguments appended to command in module.
        ext.args2  = Second set of arguments appended to command in module (multi-tool modules).
        ext.args3  = Third set of arguments appended to command in module (multi-tool modules).
        ext.prefix = File name prefix for output files.
----------------------------------------------------------------------------------------
*/

process {
    withName: SAMPLESHEET_CHECK {
        publishDir = [
            path: { "${params.outdir}/pipeline_info/genomenote" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: SAMTOOLS_VIEW {
        ext.args = '-F0x400 --output-fmt bam'
    }

    withName: BED_SORT {
        ext.args   = { "-k4 --parallel=${task.cpus} -S${task.memory.mega - 100}M" + (params.use_work_dir_as_temp ? " -T." : "") }
        ext.prefix = { "${meta.id}_sorted" }
    }

    withName: FILTER_SORT {
        ext.args   = { "-k3,3d -k7,7d --parallel=${task.cpus} -S${task.memory.mega - 100}M" + (params.use_work_dir_as_temp ? " -T." : "") }
        ext.prefix = { "${meta.id}_sorted" }
    }

    withName: COOLER_CLOAD {
        ext.args = 'pairs -0 -c1 3 -p1 4 -c2 7 -p2 8'
    }

    withName: COOLER_DUMP {
        ext.args = '-t chroms'
    }

    withName: 'COOLER_.*' {
        publishDir = [
            path: { "${params.outdir}/contact_maps" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : "${params.assembly}_" + filename }
        ]
    }

    withName: BUSCO {
        // Obey "use_work_dir_as_temp", except for large genomes
        scratch = { !params.use_work_dir_as_temp || (meta.genome_size < 2000000000) }
        ext.args = { 'test' in workflow.profile.tokenize(',') ?
                        // Additional configuration to speed processes up during testing.
                        // Note: BUSCO *must* see the double-quotes around the parameters
                        '--mode genome --tar --metaeuk_parameters \'"-s=2"\' --metaeuk_rerun_parameters \'"-s=2"\''
                    : '--mode genome --tar' }
    }

    withName: "RESTRUCTUREBUSCODIR" {
        publishDir = [
            path: { "${params.outdir}/busco" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals("versions.yml") ? null : filename }
        ]
    }

    withName: SUMMARYSEQUENCE {
        ext.prefix = { "${meta.id}_sequence" }
        ext.args   = "--report sequence"
    }

    withName: FASTK_FASTK {
        scratch    = false  // Disable scratch to get around bug https://github.com/nextflow-io/nextflow/issues/2983 - from genomeassembler
        ext.args   = { "-t1 -k${params.kmer_size}" + (params.use_work_dir_as_temp ? " -P." : "") }
    }

    withName: MERQURYFK_MERQURYFK {
        ext.args   = { (params.use_work_dir_as_temp ? "-P." : "") }
    }

    withName: CREATETABLE {
        publishDir = [
            path: { "${params.outdir}/genome_note" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: CUSTOM_DUMPSOFTWAREVERSIONS {
        publishDir = [
            path: { "${params.outdir}/pipeline_info/genomenote" },
            mode: params.publish_dir_mode,
            pattern: '*_versions.yml'
        ]
    }

    withName: MULTIQC {
        ext.args   = params.multiqc_title ? "--title \"$params.multiqc_title\"" : ''
        publishDir = [
            path: { "${params.outdir}/multiqc" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

        withName: COMBINE_STATISTICS_AND_METADATA {
        publishDir = [
            path: { "${params.outdir}/genome_note" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

        withName: POPULATE_TEMPLATE {
        memory = { check_max( 100.MB * task.attempt, 'memory' ) }
        publishDir = [
            path: { "${params.outdir}/genome_note" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

}
